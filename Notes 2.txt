Res folder
Drawable folder - we can place picture in this.
Layout folder - xml file which defines the layout. Has design/test mode.
mipmap folder - contains different quality images. Depending on screen density, the image is loaded. 
dpi - dots per inch
values folder - xml files with values of color etc which can be used.

Gradle Scripts
build.gradle(Module: app) - compileSdkVersion(highest version of compiler used)

To change the launcher icon
1. Go to top app folder
2. Right click and new and Image asset
3. select appropriate image
4. Go to app folder and manifests
5. Go to AndroidManifest.xml
6. Under application, go to android:icon="@mipmap/changed_icon_name" and insert changed icon name.  

EditText
android:layout_width="match_parent"
android:inputType="text"
android:hint="user name"
android:gravity="center"

Toast
It is a notification message tha pop up, display a certain amount of time, and automatically fades in and out, most people just use it for debugging purpose.

View object
	Button
	CheckBox
	TextView

Class R
	It has a static member => class id
		class id has a static member => clickButton
R.id.clickButton

------
Adding a custom layout

View is the super class for Button

right click layout folder 
New -> new XML layout
Give filename and layout relative or linear

Add an ImageView
android:src="@drawable/joseph"

LayoutInflator obj => to instantiate xml file -> view objects 

In custom.xml, in Relative Layout tag heading, add android:id="@+id/customId"  

------
Multiple activities in Android
Intent is messaging object to start anything(service, activities)

Go to java -> application multidemo right click
New -> Activity -> Empty Actvity
give name 

Inside manifest folder AndroidManifest.xml
All the activity will be available inside this file under activity tag
Any activity name starts with .Activity Name  

-----
Using intent to pass data from one activity to another
Put data1 & data2 into intent object before starting the second activity
intent.putExtra("first", data1);
intent.putExtra("second", data2);


Retrieve the data from Intent object
String s = intent.getStringExtra("first");
String s1 = intent.getStringExtra("second");
getDoubleExtra - if type is Double
getStringExtra - if type is String

Setting textView  
textView.setText(s+":"+s1);
-----
Create Listview in Android
Adapter
Array Adapter (String)
Base Adapter (Customized)
Cursor Adapter (database)

Inside containers -> Listview

ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(
          this, // context
          android.R.layout.simple_list_item_1,    // data is inserted into textview
          fruits  // input resource
);

set adapter to listView
listView.setAdapter(arrayAdapter);

create myview
new xml layout -> myview, root tag as TextView

add as custom view layout
R.layout.myview

Goto Project view
External libraries
Android
res
layout
simple_list_item_1
copy the last line of min height for getting the same height
goto myview and paste as last line

Add android:gravity="center_vertical" to center vertical the text

-----
ListView using ArrayAdapter with Event Handling
1. Register with setOnItemClickListener
2. Override onItemClick
3. Convert the view object to get content
4. Toast with/without position

-----
SQLiteAddDisplay
DataBaseHandler extends SQLiteOpenHelper contains 2 abstract method 
onCreate(code to create the table when running the app, only exectutes if table not available), 
onUpgrade(code to upgrade db by add column/ version, generally drop table and recreate the table)

db.insert("Employee", null, values);
Table, nullColumnHack, ContentValues object
if nullColumnHack=null, no empty row will be inserted

for documentation
/***and press enter

rawQuery() - to execute the sql query
we can use sql here

Cursor will be pointing above the first row